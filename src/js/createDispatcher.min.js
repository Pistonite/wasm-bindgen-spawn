return async function(){const t=await(await fetch(args[1])).text(),n=t+`
self.onmessage=async(_)=>{const{recv:a,start_send:i,url:o,memory:t,wasm:n}=_.data;await wasm_bindgen({memory:t,module_or_path:n}),wasm_bindgen.__dispatch_start(i);while(!0){const r=wasm_bindgen.__dispatch_recv(a);if(!r)break;const[w,d,m,c,p]=r;await new Promise((e)=>{const s=new Worker(o);s.onmessage=({data:g})=>{if(g)return s.postMessage({id:w,f:d,send:m,start:c,memory:t,wasm:n}),e();s.terminate()}});while(!wasm_bindgen.__dispatch_poll_worker(p))await new Promise((e)=>setTimeout(e,0))}wasm_bindgen.__dispatch_drop(a),self.postMessage(0)};self.postMessage(1);

`,a=URL.createObjectURL(new Blob([n],{type:"text/javascript"})),o=t+`
self.onmessage=async(n)=>{const{id:s,f:_,send:a,start:o,memory:r,wasm:t}=n.data;await wasm_bindgen({memory:r,module_or_path:t});try{const e=wasm_bindgen.__worker_main(_,o);wasm_bindgen.__worker_send(s,a,e)}catch(e){self.console.error(e),wasm_bindgen.__worker_send(s,a)}self.postMessage(0)};self.postMessage(1);

`,r=URL.createObjectURL(new Blob([o],{type:"text/javascript"})),c=await(await fetch(args[0])).arrayBuffer(),i=args[2],_=args[3],w=args[4],m=args[5],d=args[6],e=new Worker(a);await new Promise((s)=>{e.onmessage=({data:g})=>{if(g){s(),e.postMessage({recv:_,start_send:w,url:r,memory:i,wasm:c});return}URL.revokeObjectURL(a),URL.revokeObjectURL(r),e.terminate()}});while(!d(m))await new Promise((s)=>setTimeout(s,0))}();

